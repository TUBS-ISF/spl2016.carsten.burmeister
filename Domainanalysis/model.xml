<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	<featureModel chosenLayoutAlgorithm="1">
		<struct>
			<and abstract="true" mandatory="true" name="Sort">
				<description>
					Sortiert Daten
				</description>
				<alt abstract="true" mandatory="true" name="SortAlgorithm">
					<description>
						Verschiedene Sortieralgorithmen, die eingesetzt werden können
					</description>
					<feature mandatory="true" name="BubbleSort">
						<description>
							Sortiert die Daten mit Hilfe von Bubble-Sort
						</description>
					</feature>
					<feature mandatory="true" name="QuickSort">
						<description>
							Sortiert mit QuickSort
						</description>
					</feature>
					<feature mandatory="true" name="JavaSort">
						<description>
							Collections.sort() als Sortiermethode
						</description>
					</feature>
					<feature mandatory="true" name="RandomSort">
						<description>
							Verwendet RandomSort zum sortieren
						</description>
					</feature>
				</alt>
				<alt abstract="true" mandatory="true" name="Data-Input">
					<description>
						Wie werden die Daten eingelesen?
					</description>
					<feature mandatory="true" name="ConsoleInput">
						<description>
							Ermöglicht die Eingabe der zu sortierenden Datensätze über die Konsole (einfach tippen)
						</description>
					</feature>
					<alt abstract="true" mandatory="true" name="TCPSocketInput">
						<feature mandatory="true" name="JSONInput">
							<description>
								Übermittlung der Dateien als JSON
							</description>
						</feature>
						<feature mandatory="true" name="JavaSerializableInput">
							<description>
								Erhält Java-Objekte per Socket, welche sortiert werden sollen. Benötigt die Klassen als .jar
							</description>
						</feature>
					</alt>
					<feature mandatory="true" name="FileInput">
						<description>
							Liest die zu sortierenden Datensätze aus einer Datei ein
						</description>
					</feature>
					<feature mandatory="true" name="UseAsLibraryInput">
						<description>
							Ermöglicht es, die Sortierung als Library zu verwenden
						</description>
					</feature>
				</alt>
				<alt abstract="true" mandatory="true" name="Configuration">
					<description>
						Wie wird die Konfiguration des Sortierens vorgenommen?
					</description>
					<feature mandatory="true" name="ConsoleConfig">
						<description>
							Ermöglicht das Konfigurieren ohne Datei nur über den Konsolen-Input
						</description>
					</feature>
					<alt abstract="true" mandatory="true" name="ConfigFile">
						<feature mandatory="true" name="XML">
							<description>
								Das hinterlegen einer Konfigurationsdatei als XML
							</description>
						</feature>
						<feature mandatory="true" name="INI">
							<description>
								Das hinterlegen einer Konfigurationsdatei als INI
							</description>
						</feature>
					</alt>
					<or abstract="true" mandatory="true" name="SocketConfig">
						<feature mandatory="true" name="JSONConfig">
							<description>
								Das übermitteln der Konfiguration als JSON-String
							</description>
						</feature>
						<feature mandatory="true" name="JavaSerializableConfig">
							<description>
								Ermöglicht das übermitteln der Konfiguration als Objekt
							</description>
						</feature>
					</or>
					<feature mandatory="true" name="UseAsLibraryConfiguration">
						<description>
							Ermöglicht das eingeben der Konfiguration im Library-Modus
						</description>
					</feature>
				</alt>
				<or abstract="true" mandatory="true" name="Data-Output">
					<description>
						Wie werden die sortierten Daten ausgegeben?
					</description>
					<feature mandatory="true" name="FileOutput">
						<description>
							Gibt das Resultat als Datei
						</description>
					</feature>
					<alt abstract="true" mandatory="true" name="TCPSocketOutput">
						<feature mandatory="true" name="JSONOutput">
							<description>
								Ermöglicht das generieren einer Antwort als JSON
							</description>
						</feature>
						<feature mandatory="true" name="JavaSerializableOutput">
							<description>
								Arbeitet beim Socket mit dem Java Serializer. Benötigt dafür die Klassen der zu sortierenden Daten als Jar zum importieren.
							</description>
						</feature>
					</alt>
					<feature mandatory="true" name="UseAsLibraryOutput">
						<description>
							Bietet die Sortier-Funktion auch als Library an
						</description>
					</feature>
					<feature mandatory="true" name="ConsoleOutput">
						<description>
							Printed den Output-Datensatz auf die Konsole
						</description>
					</feature>
				</or>
				<alt abstract="true" mandatory="true" name="SortCriteria">
					<description>
						Wie soll sortiert werden?
					</description>
					<feature mandatory="true" name="SortAscending">
						<description>
							Erste Ausbaustufe des sortierens. Interpretiert den Datensatz als String und sortiert diesen.
						</description>
					</feature>
					<feature mandatory="true" name="MultiField">
						<description>
							Ermöglicht es, mehrere Felder zu definieren und an Hand dieser die Daten zu sortieren.
						</description>
					</feature>
				</alt>
				<feature name="Logging">
					<description>
						Logged Anfragen etc mit
					</description>
				</feature>
			</and>
		</struct>
		<constraints>
			<rule>
				<eq>
					<var>SocketConfig</var>
					<var>TCPSocketInput</var>
				</eq>
			</rule>
			<rule>
				<eq>
					<var>JSONOutput</var>
					<var>JSONInput</var>
				</eq>
			</rule>
			<rule>
				<imp>
					<var>MultiField</var>
					<not>
						<var>INI</var>
					</not>
				</imp>
			</rule>
			<rule>
				<eq>
					<var>JavaSerializableInput</var>
					<var>JavaSerializableOutput</var>
				</eq>
			</rule>
		</constraints>
		<calculations Auto="true" Constraints="true" Features="true" Redundant="true" Tautology="true"/>
		<comments/>
		<featureOrder userDefined="false"/>
	</featureModel>
